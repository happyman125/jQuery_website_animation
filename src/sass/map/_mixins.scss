@import "functions";

/* Media Queries
--------------------------------------------------------------------------------*/
@mixin respond-below($name) {
  $breakpoint-value: _breakpoint($name);
  @media screen and (max-width: em($breakpoint-value - 1)) {
    @content;
  }
}

@mixin respond-between($name1, $name2) {
  $breakpoint-value1: _breakpoint($name1);
  $breakpoint-value2: _breakpoint($name2);
  @media only screen and (min-width: em($breakpoint-value1)) and (max-width: em($breakpoint-value2 - 1px)) {
    @content;
  }
}

@mixin respond-above($name) {
  $breakpoint-value: _breakpoint($name);
  @media screen and (min-width: em($breakpoint-value)) {
    @content;
  }
}

/* Typography
--------------------------------------------------------------------------------*/
@mixin _text-size($text-size, $name: "phone") {
  $text-size-properties: _text-properties-for($text-size, $name);

  @if $text-size-properties != null {
    font-size: map-get($text-size-properties, "font-size") !important;
    line-height: map-get($text-size-properties, "line-height") !important;
  }
  @else {
    @warn "Breakpoint '#{$name}' for text size '#{$text-size}' is not defined";
  }
}

@mixin responsive-text-size($text-size, $default-breakpoint: "phone") {
  @include _text-size($text-size, $default-breakpoint);

  $text-breakpoints-map: _text-breakpoints-for($text-size);
  $text-breakpoints-keys: map-keys($text-breakpoints-map);

  @each $name in $text-breakpoints-keys {
    @if $name != $default-breakpoint and breakpoint($name) != null {
      @include respond-above($name) {
        @include _text-size($text-size, $name);
      }
    }
  }
}

/* Typography
--------------------------------------------------------------------------------*/
@mixin _size($type, $map, $size, $name, $param: "default") {
  $size-properties: _properties-for($map, $size, $name);

  @if $size-properties != null {
    @if $type == "image" {

      $dimension: map-get($size-properties, "dimension");
      $spacing: map-get($size-properties, "spacing");

      @if $param == "dimension" {
        width: $dimension;
        height: $dimension;
      }

      @if $param == "height" {
        min-height: $dimension;
      }

      @if $param == "column" {
        width: $dimension + $spacing;
      }

    } @elseif $type == "text" {
      font-size: map-get($size-properties, "font-size");
      line-height: map-get($size-properties, "line-height");

    } @elseif $type == "padding" {
      padding-left: map-get($size-properties, "padding-left");
      padding-right: map-get($size-properties, "padding-right");
    }
  }

  @else {
    @warn "Breakpoint '#{$name}' for text size '#{$size}' is not defined";
  }
}

@mixin responsive-size($type, $map, $size, $default-breakpoint: "phone", $param: "dimension") {
  @include _size($type, $map, $size, $default-breakpoint, $param);

  $breakpoints-map: _breakpoints-for($map, $size);
  $breakpoints-keys: map-keys($breakpoints-map);

  @each $name in $breakpoints-keys {
    @if $name != $default-breakpoint and breakpoint($name) != null {
      @include respond-above($name) {
        @include _size($type, $map, $size, $name, $param);
      }
    }
  }
}

// Viewport typography
@mixin vw($size) {
  font-size: get-vw($size);
}

// Aliases
@mixin _text-size($text-size, $name: "phone") {
  @include _size("text", $text-sizing, $text-size, $name);
}

@mixin padding-size($text-size, $name: "phone") {
  @include _size("padding", $text-sizing, $text-size, $name);
}

@mixin _image-size($image-size, $name: "phone", $type: "dimension") {
  @include _size("image", $image-sizing, $image-size, $name, $type);
}

@mixin responsive-text-size($text-size, $default-breakpoint: "phone") {
  @include responsive-size("text", $text-sizing, $text-size, $default-breakpoint);
}

@mixin responsive-padding-size($padding-size, $default-breakpoint: "phone") {
  @include responsive-size("padding", $padding-sizing, $padding-size, $default-breakpoint);
}

@mixin responsive-image-size($image-size, $param: "dimension", $default-breakpoint: "phone") {
  @include responsive-size("image", $image-sizing, $image-size, $default-breakpoint, $param);
}

/* Intrinsic Ratios
--------------------------------------------------------------------------------*/
@mixin intrinsic-ratio-parent {
  position: relative;
  height: 0;
}

@mixin intrinsic-ratio-child {
  display: block;
  position: absolute;
  width: 100% !important; // Nuke the external styles
  height: 100% !important; // Nuke the external styles
  top: 0;
  margin: 0;
  padding: 0;
}

@mixin intrinsic-ratio-ratio($ratio: 16/9, $width: 100%, $position: top) {
  padding-#{$position}: (1 / $ratio) * $width;
  width: $width;
}

@mixin intrinsic-ratio($ratio: 16/9, $width: 100%, $elements: '> *', $position: top) {
  @include intrinsic-ratio-parent;
  @include intrinsic-ratio-ratio($ratio, $width, $position);

  @each $element in $elements {
    #{$element} {
      @include intrinsic-ratio-child;
    }
  }
}

// CSS level 4 Viewport: http://dev.w3.org/csswg/css-device-adapt/#the-atviewport-rule
@mixin viewport {
  @-webkit-viewport {
    @content;
  }
  @-moz-viewport {
    @content;
  }
  @-ms-viewport {
    @content;
  }
  @viewport {
    @content;
  }
}
